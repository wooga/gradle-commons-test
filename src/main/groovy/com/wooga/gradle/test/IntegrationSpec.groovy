/*
 * Copyright 2018 Wooga GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package com.wooga.gradle.test


import com.wooga.gradle.test.queries.PropertyQuery
import com.wooga.gradle.test.writers.BasePropertyWriter
import com.wooga.gradle.test.writers.PropertyGetterTaskWriter
import nebula.test.functional.ExecutionResult
import org.junit.Rule
import org.junit.contrib.java.lang.system.EnvironmentVariables
import org.junit.contrib.java.lang.system.ProvideSystemProperty

import static com.wooga.gradle.PlatformUtils.windows

class IntegrationSpec extends nebula.test.IntegrationSpec implements IntegrationHandler {

    @Rule
    ProvideSystemProperty properties = new ProvideSystemProperty("ignoreDeprecations", "true")

    @Rule
    public final EnvironmentVariables environmentVariables = new EnvironmentVariables()

    def setup() {
        environmentVariables.clear()
    }

    static String osPath(String path) {
        if (isWindows()) {
            path = path.startsWith('/') ? "c:" + path : path
        }
        new File(path).path
    }

    Boolean fileExists(String... path) {
        fileExists(path.join("/"))
    }

    Boolean outputContains(ExecutionResult result, String message) {
        result.standardOutput.contains(message) || result.standardError.contains(message)
    }

    String wrapValueBasedOnType(Object rawValue, Class type, Closure<String> fallback = null) {
        wrapValueBasedOnType(rawValue, type.simpleName, fallback)
    }

    String wrapValueBasedOnType(Object rawValue, String type, Closure<String> fallback = null) {
        return PropertyUtils.wrapValueBasedOnType(rawValue, type, fallback)
    }

    static File generateBatchWrapper(String fileName, Boolean printEnvironment = false) {
        BatchmodeWrapper wrapper = new BatchmodeWrapper(fileName)
        wrapper.printEnvironment = printEnvironment
        wrapper.toTempFile()
    }

    void addTask(String name, String typeName, Boolean force, String... lines) {
        lines = lines ?: []
        buildFile << """
        task (${name}, type: ${typeName}) {                       
            ${force ? "onlyIf = {true}\n" : ""}${lines.join('\n')}
        }
        """.stripIndent()
    }

    List<String> writeTasks(List<BasePropertyWriter> writers, PropertyGetterTaskWriter getterWriter = null) {

        List<String> taskNames = new ArrayList<String>()

        // Write all the task/arguments generated by the other writers
        for (writer in writers) {
            def write = writer.write(this)
            // Returning a result is optional
            if (write != null) {
                taskNames.addAll(write.arguments)
            }
        }

        // Always add the task from the query last
        if (getterWriter != null) {
            taskNames.addAll(getterWriter.write(this).arguments)
        }

        taskNames
    }

    ExecutionResult runTasksSuccessfully(String taskName, List<BasePropertyWriter> writers) {
        List<String> tasksToRun = new ArrayList<String>()
        tasksToRun.add(taskName)
        tasksToRun.addAll(writeTasks(writers))
        runTasksSuccessfully(*tasksToRun)
    }

    ExecutionResult runTasksSuccessfully(String taskName, BasePropertyWriter writer) {
        runTasksSuccessfully(taskName, [writer])
    }

    PropertyQuery runPropertyQuery(PropertyGetterTaskWriter queryTaskWriter, BasePropertyWriter... additional) {
        runPropertyQuery(queryTaskWriter, additional.toList())
    }

    PropertyQuery runPropertyQuery(PropertyGetterTaskWriter queryTaskWriter, List<BasePropertyWriter> writers) {
        List<String> tasks = writeTasks(writers, queryTaskWriter)
        def exec = runTasksSuccessfully(*tasks)
        queryTaskWriter.generateQuery(this, exec)
    }

    PropertyQuery runPropertyQuery(String taskName, PropertyGetterTaskWriter queryTaskWriter, List<BasePropertyWriter> writers) {
        List<String> tasks = writeTasks(writers, queryTaskWriter)
        tasks.add(0, taskName)
        def exec = runTasksSuccessfully(*tasks)
        queryTaskWriter.generateQuery(this, exec)
    }

    PropertyQuery runPropertyQuery(String taskName, PropertyGetterTaskWriter queryTaskWriter, BasePropertyWriter... additional) {
        runPropertyQuery(taskName, queryTaskWriter, additional.toList())
    }
}





